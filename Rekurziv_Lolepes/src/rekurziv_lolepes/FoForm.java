/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package rekurziv_lolepes;

import java.awt.Color;
import java.io.*;
import static java.lang.Character.getNumericValue;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dm
 */

public class FoForm extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form FoForm
     */
    public FoForm() {
        this.x = 0;
        initComponents();
    }
   
    //private void lep();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        checkbox1 = new java.awt.Checkbox();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lolepes");
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(555, 600));
        setMinimumSize(new java.awt.Dimension(461, 600));
        setPreferredSize(new java.awt.Dimension(461, 600));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "válassz", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 100, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("?*? Mátrix kitöltése lólépésben");
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 400, 370));

        jProgressBar1.setDebugGraphicsOptions(javax.swing.DebugGraphics.LOG_OPTION);
        jProgressBar1.setDoubleBuffered(true);
        jProgressBar1.setFocusCycleRoot(true);
        jProgressBar1.setFocusTraversalPolicyProvider(true);
        getContentPane().add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 400, 20));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Mátrix mérete: ?");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 120, 20));

        jButton1.setText("START");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        jLabel2.setText("Feladat erőssége");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 240, -1));

        jButton2.setText("Betöltés");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, -1, -1));

        jLabel3.setText("Mentett állapot betöltése");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 150, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oszlop" }));
        jComboBox2.setToolTipText("kezdő oszlop kiválasztása");
        jComboBox2.setEnabled(false);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 490, 80, -1));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sor" }));
        jComboBox3.setToolTipText("kezdő sor kiválsztása");
        jComboBox3.setEnabled(false);
        jComboBox3.setMinimumSize(new java.awt.Dimension(69, 26));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 460, 80, -1));

        jLabel4.setText("Kezdő Sor");
        jLabel4.setToolTipText("opcionális");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, 70, -1));

        jLabel5.setText("Kezdő Oszlop");
        jLabel5.setToolTipText("opcionális");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 520, -1, -1));

        checkbox1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        checkbox1.setForeground(java.awt.Color.darkGray);
        checkbox1.setLabel("Lepesiranyokat is ment");
        checkbox1.setName(""); // NOI18N
        getContentPane().add(checkbox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 460, -1, -1));
        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 int sor=0;
    int oszlop=0;
    int matrix_merete=0;
    int [][] matrix;
    int [][] teljes_kor;
    int lepesszam=1;
    int osszlepes;
    boolean stop=false;
    int kor=0;
    int i=0;
    int szamlalo=0;
    int szamlalo2=0;
    int ZZ=0;
    int []lepesor;
    int x;
    int nez=0;
    int irany=0;
    int szamlal=0;
    int ss;
    int oo;
    boolean betoltve=false;
    PrintWriter fajl;
    DataOutputStream mentes_fajl;
      int S=sor;
      int O=oszlop;
      int mentes;
      int q;
      int qq;
      int indulo_sor=0;
      int indulo_oszlop=0;
      int ujrainditva=0;
      int [] sor1;
      int bt=2;
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
              
        
        matrix_merete=jComboBox1.getSelectedIndex();
        if(matrix_merete==0)return;
        jLabel1.setText("Mátrix mérete: "+jComboBox1.getItemAt(matrix_merete));
        jTextArea1.setText(jComboBox1.getItemAt(matrix_merete)+"*"+jComboBox1.getItemAt(matrix_merete)+" Mátrix kitöltése lólépésben\n"); 
        matrix= new int[matrix_merete+4][matrix_merete+4];
        teljes_kor=new int [matrix_merete+4][matrix_merete+4];
        if(matrix_merete==0){jTextArea1.setText("Válassz mátrix méretet");return;}
        jTextArea1.append("Mátrix feltöltése.\n");
        jTextArea1.append("Mátrix feltöltése kész.\n");
        jTextArea1.append("A start gomb megnyomása után a munkakönyvtár .\n");
        jTextArea1.append("mátrix mérete_sor.oszlop_megoldasok_ujraindítva.txt fájlban \nkerülnek mentésre a megoldások .\n");
        jTextArea1.append("A fogalmak számokban értendők pl: 6_0.1_megoldasok_1.txt .\n");
        jTextArea1.append("A program kb percenkánt 1 mentést készít a matrix_merete_mentes.txt-be.\n");
        jTextArea1.append("Amivel leállás esetén visszaállítható a folyamat.\n");
        jTextArea1.append("A számítási folyamat 5*5 nél rövid 6*6 nál pár óra e felett sok idő:).\n");
        jTextArea1.append("Leállítás kill... a számítások felgyorsítása vágett .\n");
        jTextArea1.append("Mentás visszasállítás előtt ki kell választani a mátrix méretét .\n");
        
        matrix_merete=matrix_merete+4;
        jTextArea1.setBackground(Color.ORANGE);
        jProgressBar1.setValue((100/8)*(matrix_merete-3));
        //if((100/8)*(matrix_merete-3)<12){
      /*  if((100/8)*(matrix_merete-3)<12){
        jProgressBar1.setBackground(Color.green);}
        if((100/8)*(matrix_merete-3)>12){
        jProgressBar1.setBackground(Color.yellow);}
        if((100/8)*(matrix_merete-3)>40){
        jProgressBar1.setBackground(Color.orange);}
        if((100/8)*(matrix_merete-3)>60){
        jProgressBar1.setBackground(Color.red);}*/
        
        lepesor=new int [(matrix_merete*matrix_merete)+10];
        
        for(i=0;i<lepesor.length;i++)lepesor[i]=0;
        kor=0;
        nullazas();//matrix feltoltese letrehozasa
        
        
        //kezdő sor és oszlop kiválasztásának a lehetősége bekapcsolása
        
        jComboBox2.enable();
        jComboBox3.enable();
        jComboBox2.removeAllItems();
         jComboBox3.removeAllItems();
        for(int h=0;h<matrix_merete;h++){
            jComboBox2.addItem(String.valueOf(h));
            jComboBox3.addItem(String.valueOf(h));
        
        }
        
        
       
        //jTextArea1.append(String.valueOf(matrix_merete+6));// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //@SuppressWarnings("empty-statement")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            nullazas();
            String st;
            mentes=0;
            
            for(q=indulo_sor;q<matrix_merete;q++){
                for(qq=indulo_oszlop;qq<matrix_merete;qq++){
                    fajl = new PrintWriter(new FileWriter(String.valueOf(matrix_merete)+"_"+String.valueOf(q)+"."+String.valueOf(qq)+"megoldasok"+String.valueOf(ujrainditva)+".txt"));
                    irany=((q+1)*matrix_merete)-(matrix_merete-(qq+1));//az indulóhely számának kiszámytása ha az nem 0,0
                    
                    
                    if(!betoltve)kor=1;
                    sor=q;
                    S=q;
                    oszlop=qq;
                    O=qq;
                    //x=matrix_merete*matrix_merete;
                    lepesszam=1;
                    //teljes_kor[sor][oszlop]=0;
                    matrix[q][qq]=lepesszam++;
                   
                    lep();
                    if(lepesszam>2){
                   
                    for(int j=0;j<matrix_merete;j++){
                        for(int a=0;a<matrix_merete;a++){
                            int z=matrix_merete-1;
                            if(matrix[j][a]<10)st="0"+String.valueOf(matrix[j][a]+".");
                            else st=String.valueOf(matrix[j][a]+".");
                            if (a<z)fajl.append(st);
                            else fajl.append(st+".\n");}}
                    fajl.append(String.valueOf(kor)+". megoldás\n");
                      
                   
                    }
                    //listaz();
                    
                    
                    
                    nullazas();
                    fajl.close();
                    
                    
                }}
           
            jTextArea1.append("\n vége a megoldások a fájlban\n");
             jTextArea1.setBackground(Color.WHITE);
        } catch (IOException ex) {
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
            jTextArea1.append("\n fmnyhiba\n");
             jTextArea1.setBackground(Color.RED);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentAdded

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        fajl.close();// TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        indulo_oszlop=jComboBox2.getSelectedIndex();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
        indulo_sor=jComboBox3.getSelectedIndex();
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        DataInputStream beolvas = null;
        if(matrix_merete==0){jTextArea1.append("\n válaszd ki a folytatni kivánt matrix méretét\nMajd kattints újra a betöltés gombon\n");return;}
        try {
            // TODO add your handling code here:

            beolvas=new DataInputStream(new FileInputStream(String.valueOf(matrix_merete)+"mentes.txt"));
            jTextArea1.append("a "+String.valueOf(matrix_merete)+"mentes.txt fájl megnyitva\n");
            //sor1=beolvas.readLine();
            jTextArea1.append("\na "+String.valueOf(matrix_merete)+"mentes.txt fájl beolvasva\n");
            //jTextArea1.append(sor1+"\n");
            //char c = 0;
            sor1=new int [(matrix_merete*matrix_merete)+10];
            int u=0;
            while(beolvas.available()>0){ //beállitom a kezdo ártákeit a mentésből a változöknak
                sor1[u]=beolvas.readInt();

                jTextArea1.append(String.valueOf(sor1[u]));
                u++;
            }
            indulo_sor=sor1[0];
            jComboBox3.setSelectedIndex(indulo_sor);
            indulo_oszlop=sor1[1];
            jComboBox2.setSelectedIndex(indulo_oszlop);
            kor=sor1[u-2];
            ujrainditva=sor1[u-1]+1;
        } catch (FileNotFoundException ex) {
            jTextArea1.setText("");
            jTextArea1.append("\n nem található a mentés fájl a munkakönyvtárban\n");
            jTextArea1.setBackground(Color.RED);
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            beolvas.close();
        } catch (IOException ex) {
            jTextArea1.append("a "+String.valueOf(matrix_merete)+"mentes.txt fájl bezárási hiba\n");
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextArea1.append("\na "+String.valueOf(matrix_merete)+"mentes.txt fájl bezárva\n");
        jTextArea1.append("\na folytatáshoz kattintson a START gombon.\n");
        jComboBox2.disable();
        jComboBox3.disable();
        betoltve=true;

    }//GEN-LAST:event_jButton2ActionPerformed
    private void lep() throws IOException {//lolepessel feltoltes minden variacioban
    mentes++;
     if(mentes == 999999999){ment();}
      
     
      
      //S=sor;
      //O=oszlop;
      
        for(int a=0;a<8;a++){
            //betoltés ha lehet
            if(betoltve){
                    a=sor1[bt]-1;
                    bt++;
                    if(bt>=matrix_merete*matrix_merete){betoltve=false;}
                }
            
            
            
            
            
                 if(a==0){
                        S=S-2;O=O+1;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                 S=S+2;O=O-1;
                        } else if(matrix[S][O]==0){
                            teljes_kor[sor][oszlop]=a+1;
                            lepesor[lepesszam]=a+1;//marad az elejen 2 hely a 0,1 a kezdősor oszlopnak
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                 
                                  lep();
                                  //if(x==matrix_merete*matrix_merete || x<lepesszam-1)x=lepesszam-1;
                                     if(lepesszam>matrix_merete*matrix_merete){
                                       lentlistaz(); 
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                  lepesor[lepesszam]=0;
                                    teljes_kor[sor][oszlop]=0;
                                  sor=S+2;oszlop=O-1;
                                  S=S+2;O=O-1;
                                  matrix[sor][oszlop]=--lepesszam-1;
                                  //teljes_kor[sor][oszlop]=a+1;
                                    }else{S=S+2;O=O-1;}
                }
                 if(a==1){
                        S=S-1;O=O+2;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                S=S+1;O=O-2;
                        } else if(matrix[S][O]==0){
                             teljes_kor[sor][oszlop]=a+1;
                             lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                 
                                  lep(); 
                                  if(lepesszam>matrix_merete*matrix_merete){
                                        lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                    teljes_kor[sor][oszlop]=0;
                                    lepesor[lepesszam]=0;
                                  sor=S+1;oszlop=O-2;
                                  S=S+1;O=O-2;
                                  matrix[sor][oszlop]=--lepesszam-1;
                                  //teljes_kor[sor][oszlop]=a+1;
                        }else{S=S+1;O=O-2;}
                }
                if(a==2){
                        S=S+1;O=O+2;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                S=S-1;O=O-2;
                        } else if(matrix[S][O]==0){
                             teljes_kor[sor][oszlop]=a+1;
                             lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                 
                                  lep();
                                    
                                  if(lepesszam>matrix_merete*matrix_merete){
                                        lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                    teljes_kor[sor][oszlop]=0;
                                    lepesor[lepesszam]=0;
                                   sor=S-1;oszlop=O-2;
                                   S=S-1;O=O-2;
                                 matrix[sor][oszlop]=--lepesszam-1;
                                 //teljes_kor[sor][oszlop]=a+1;
                        }else{S=S-1;O=O-2;}
                }
                if(a==3){
                        S=S+2;O=O+1;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                     S=S-2;O=O-1;
                        } else if(matrix[S][O]==0){
                             teljes_kor[sor][oszlop]=a+1;
                             lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                 
                                  lep();
                                    
                                  if(lepesszam>matrix_merete*matrix_merete){
                                       lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                    teljes_kor[sor][oszlop]=0;
                                    lepesor[lepesszam]=0;
                                   sor=S-2;oszlop=O-1;
                                   S=S-2;O=O-1;
                                 matrix[sor][oszlop]=--lepesszam-1;
                                 //teljes_kor[sor][oszlop]=a+1; 
                        }else {S=S-2;O=O-1;}
                }
                if(a==4){
                        S=S+2;O=O-1;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                S=S-2;O=O+1;
                        } else if(matrix[S][O]==0){
                             teljes_kor[sor][oszlop]=a+1;
                             lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                
                                  lep();
                                    
                                  if(lepesszam>matrix_merete*matrix_merete){
                                        lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                    teljes_kor[sor][oszlop]=0;
                                    lepesor[lepesszam]=0;
                                   sor=S-2;oszlop=O+1;
                                   S=S-2;O=O+1;
                                  matrix[sor][oszlop]=--lepesszam-1;
                                   //teljes_kor[sor][oszlop]=a+1;
                        }else{S=S-2;O=O+1;}
                }
                if(a==5){
                        S=S+1;O=O-2;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                    S=S-1;O=O+2;
                        } else if(matrix[S][O]==0){
                            teljes_kor[sor][oszlop]=a+1;
                            lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                
                                  lep();
                                   
                                  if(lepesszam>matrix_merete*matrix_merete){
                                         lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                    teljes_kor[sor][oszlop]=0;
                                    lepesor[lepesszam]=0;
                                   sor=S-1;oszlop=O+2;
                                    S=S-1;O=O+2;
                                 matrix[sor][oszlop]=--lepesszam-1;
                               //teljes_kor[sor][oszlop]=a+1;
                        }else{S=S-1;O=O+2;}
                }
                if(a==6){
                        S=S-1;O=O-2;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                S=S+1;O=O+2;
                        } else if(matrix[S][O]==0){
                            teljes_kor[sor][oszlop]=a+1;
                            lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                  
                                  lep();
                                  
                                  if(lepesszam>matrix_merete*matrix_merete){
                                        lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                     teljes_kor[sor][oszlop]=0;
                                     lepesor[lepesszam]=0;
                                   sor=S+1;oszlop=O+2;
                                   S=S+1;O=O+2;
                                 matrix[sor][oszlop]=--lepesszam-1;
                                 //teljes_kor[sor][oszlop]=a+1;
                        }else{S=S+1;O=O+2;}
                }
                if(a==7){
                        S=S-2;O=O-1;
                        if(S<0 || O<0 || S>matrix_merete-1 || O>matrix_merete-1){
                                S=S+2;O=O+1;
                        } else if(matrix[S][O]==0){
                            teljes_kor[sor][oszlop]=a+1;
                            lepesor[lepesszam]=a+1;
                                  sor=S;oszlop=O;  
                                  matrix[sor][oszlop]=lepesszam++;
                                  
                                  lep();
                                    
                                  if(lepesszam>matrix_merete*matrix_merete){
                                        lentlistaz();
                                      //return;
                                    } 
                                    if(lepesszam==0){
                                        return;
                                    }
                                  matrix[sor][oszlop]=0;
                                  teljes_kor[sor][oszlop]=0;
                                  lepesor[lepesszam]=0;
                                   sor=S+2;oszlop=O+1;
                                    S=S+2;O=O+1;
                                  matrix[sor][oszlop]=--lepesszam-1;
                                   //teljes_kor[sor][oszlop]=a+1;
                        }else{S=S+2;O=O+1;}
                        

      
                }
        }
       
         
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FoForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox checkbox1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    private void nullazas() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        for(int q=0;q<matrix_merete;q++){
            for(int a=0;a<matrix_merete;a++){
                matrix[q][a]=0;
                teljes_kor[q][a]=0;
                //int z=matrix_merete-1;
               // if (a<z)jTextArea1.append(String.valueOf(matrix[q][a]));
                //else jTextArea1.append(String.valueOf(matrix[q][a])+"\n");
                //for(i=0;i<lepesor.length;i++)lepesor[i]=0;
            }
        }
         for(i=0;i<lepesor.length;i++)lepesor[i]=0;
        szamlal=0;
        nez=0;
        //jTextArea1.append("\nMátrix kinullázva\n");
}

    private void listaz() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String st;
        jTextArea1.append("\n");
        for(int j=0;j<matrix_merete;j++){
                 for(int a=0;a<matrix_merete;a++){
             int z=matrix_merete-1;
             if(matrix[j][a]<10)st="0"+String.valueOf(matrix[j][a]);
             else st=String.valueOf(matrix[j][a]);
             if (a<z)jTextArea1.append(st+".");
             else jTextArea1.append(st+".\n");}}
             jTextArea1.append("\n"+String.valueOf(lepesszam-1) +"  lepesszamig\n");
             
             
    }

    private void lentlistaz() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
           // try {
            //nullazas();
            String st;
            String fej;
           
            //for(int q=0;q<matrix_merete;q++){
              //  for(int qq=0;qq<matrix_merete;qq++){
                    
                    
                   // sor=q;
                   // S=q;
                   // oszlop=qq;
                   // O=qq;
                    //x=matrix_merete*matrix_merete;
                   // lepesszam=1;
                   // matrix[q][qq]=lepesszam++;
                   // lep();
                   //listaz();
                                  
                    //jTextArea1.setText("\n"+String.valueOf(kor) +". megoldás\n");
                 
                   fej=String.valueOf(irany)+"_kezdohelyrol_"+String.valueOf(kor)+"_"+String.valueOf(matrix_merete);  
                 
                    if(lepesszam>2){
                    if(checkbox1.getState()){  
                      fajl.append(fej+" \n");
                        for(int j=0;j<matrix_merete;j++){
                            for(int a=0;a<matrix_merete;a++){
                                int z=matrix_merete-1;
                                if(teljes_kor[j][a]<10)st="0"+String.valueOf(teljes_kor[j][a]+".");
                                else st=String.valueOf(teljes_kor[j][a]+".");
                                if (a<z)fajl.append(st);
                                else fajl.append(st+".\n");}}
                        //fajl.append(String.valueOf(kor)+". megoldás\n");
                    } else {
                    }
                    fajl.append(fej+" \n");
                    for(int j=0;j<matrix_merete;j++){
                        for(int a=0;a<matrix_merete;a++){
                            int z=matrix_merete-1;
                            if(matrix[j][a]<10)st="0"+String.valueOf(matrix[j][a]+".");
                            else st=String.valueOf(matrix[j][a]+".");
                            if (a<z)fajl.append(st);
                            else fajl.append(st+".\n");}}
                    fajl.append(String.valueOf(kor)+". megoldás\n");
                    
                    
                    //fajl.close();
                    }//ment();
                    kor++;
                    
                    
                   // nullazas();
                    
                    
                //}}
       // } catch (IOException ex) {
         //   Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        //}
    }
    private void ment() throws IOException{
    String st;
     
    lepesor[0]=q;
    lepesor[1]=qq;
    lepesor[(matrix_merete*matrix_merete)+1]=kor;
    lepesor[(matrix_merete*matrix_merete)+2]=ujrainditva;
    lepesor[(matrix_merete*matrix_merete)+3]=-10;
                try {   
                    mentes_fajl = new DataOutputStream(new FileOutputStream(String.valueOf(matrix_merete)+"mentes.txt"));
                } catch (IOException ex) {
                    jTextArea1.setBackground(Color.RED);
                    Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
               /* mentes_fajl.append(String.valueOf(q)+"."+String.valueOf(qq)+"#");
                     for(int j=0;j<matrix_merete;j++){
                        for(int a=0;a<matrix_merete;a++){
                            
                            st=String.valueOf(teljes_kor[j][a]+"."); }}*/
                            
                 for(i=0;lepesor[i]!=-10;i++){mentes_fajl.writeInt(lepesor[i]);}        
                            
                        
                 
                   
                  //mentes_fajl.append(String.valueOf(q)+"."+String.valueOf(qq)+"V"); 
                  //mentes_fajl.append(String.valueOf(kor)+"K");
                     mentes=0;
                     mentes_fajl.close();
                    
                    
                    
    
    }

   
}   
