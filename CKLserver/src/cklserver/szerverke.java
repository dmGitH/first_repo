/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cklserver;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dm
 */
public class szerverke extends  javax.swing.JFrame {

    private static final long serialVersionUID = -7910731934189134587L;

    /**
     * Creates new form szerverke
     */
    public szerverke() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        textArea1 = new java.awt.TextArea();
        canvas1 = new java.awt.Canvas();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kriptova kliensregisztráló szerver");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("START");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setToolTipText("Alap PORT");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", " " }));
        jComboBox2.setSelectedIndex(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 117, Short.MAX_VALUE)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 118, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
   while(true){  
        try {       
            // TODO add your handling code here:
            
            szerverfut();
          /*  out.close();
            in.close();
            clientSocket.close();
            serverSocket.close();
            */
            textArea1.setText("\nSzerver leállt");
        } catch (IOException ex) {
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        for(int i=0;i<1200;i++){
            jComboBox1.addItem(String.valueOf(i));
           
        }
        jComboBox1.setSelectedIndex(77);
       
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new szerverke().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

 int portv;
    int port;
    long uzenet=0;
     ServerSocket serverSocket=null;
      Socket clientSocket = null;
      DataOutputStream out;
       DataInputStream in;
       String inputLine = null;
       
       
   
       boolean mode=true;
       long data=0;  
        int kuldo=0;
 
        
       
        
   //a beregisztréltak adatai
        long [] idobelyeg;
        long [] hash;
        String [] login;
        String [] ip;
        String iptmp;
        int [] portja;
        int porttmp;
        int keresazon;
        int sorszamod=0;
        int maxkliens=0;
        char [] szerverkulcs;
         boolean fut=true;
         boolean indul=true;
    
public void szerverfut() throws IOException{
    fut=true;
   
    if(indul){
            maxkliens=(jComboBox2.getSelectedIndex()+1)*5;
            szerverkulcs=new char[25];
            for(int i=0;i<25;i++){
                szerverkulcs[i]=(char) ((char)(Math.random()*100)+20);
            }

            idobelyeg=new long[maxkliens];
            hash=new long[maxkliens];
            login=new String[maxkliens];
            portja=new int[maxkliens];
            ip=new String[maxkliens];

            kuldo=0;
            mode=true;
            textArea1.setBackground(Color.yellow);
            textArea1.setForeground(Color.black);
            if(jComboBox1.getSelectedIndex()==0)return;
            port=jComboBox1.getSelectedIndex();


             Calendar c=Calendar.getInstance();

             String indult;
                indult = c.getTime().toLocaleString();
             textArea1.append("\nSzerv indult: "+indult);

            try {
                serverSocket = new ServerSocket(port);
            } catch (IOException e) {
                textArea1.append("\nA port nem elérhető: "+String.valueOf(port));
                return;
            }
            indul=false;
    }    
    
    while(fut)
    {
        kiszolgalasindul();
    }   
    
   
}

    private void kiszolgalasindul() throws IOException {
        textArea1.append("\nKérésre várakozik");
     
    
    
  

        OUTER:
        while (true) {
            try {
                clientSocket = serverSocket.accept();
            } catch (IOException e) {
                textArea1.append("\nKapcsolódás hiba.");
                return;
            }
            textArea1.append("\nKliens kapcsolódott");
            try {
                out = new DataOutputStream(clientSocket.getOutputStream());
            } catch (IOException ex) {
                textArea1.append("\nKimenet nyitás hiba");
                Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
            }
            textArea1.append("\nKimenet nyitva");
            try {
                in = new DataInputStream(clientSocket.getInputStream());
            } catch (IOException ex) {
                textArea1.append("\nBemenet nyitás hiba.");
                Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
            }
            textArea1.append("\nBemenet nyitva");
            textArea1.setBackground(Color.black);
            textArea1.setForeground(Color.yellow);
            iptmp=clientSocket.getInetAddress().getHostAddress();
            //porttmp=clientSocket.getLocalPort();
            keresazon=0;
            ellenorzes();
            keresazon=in.readInt();
            textArea1.append("\nKérés azon:"+keresazon);
            switch (keresazon) {
                case 0:
                    break OUTER;
                case 1:
                    regisztral();
                    break;
                case 2:
                    torlimagat();
                    break;
                case 3:
                    regisztraltbankeres();
                    break;
                case 4:
                    megerosit();
                    break;
                case 5:
                    
                /*    if("SZERVER_KILL_KRIPTOVA".equals(in.readUTF()))System.exit(0);
                    if("SZERVER_GHOST".equals(in.readUTF()))textArea1.setVisible(true);
                    if("SZERVER_UNGHOST".equals(in.readUTF()))textArea1.setVisible(true);*/
                    break;
                default:
                    break;
            }
            out.writeUTF("-szerver-");
            
            ellenorzes();
            
            break;
        }
  //kapcsolatot lezár és ujabb kérésre várakozásba kezd
  in.close();
  out.close();
  clientSocket.close();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void regisztral() {
        textArea1.append("\nregisztral");
        if(sorszamod<maxkliens){
        //beregisztralom
            String logintmp = null;
            try {
                logintmp=in.readUTF();
                textArea1.append("\n"+logintmp);
            } catch (IOException ex) {
                try {
                    out.writeUTF("olvasási hiba: Login");
                } catch (IOException ex1) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex1);
                    return;
                }
                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
          Calendar c=Calendar.getInstance();
          long idobelyegtmp=c.getTimeInMillis();
        
        
            long hashtmp = 0;
            try {
                hashtmp=in.readLong();
                textArea1.append("\n"+hashtmp);
            } catch (IOException ex) {
                try {
                    out.writeUTF("olvasási hiba: hash");
                } catch (IOException ex1) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex1);
                    return;
                }
                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            
            try {
                porttmp=in.readInt();
                //le kell titkoítani
                //ellenőrizni kell a login létezését
            } catch (IOException ex) {
                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                try {
                    out.writeUTF("olvasási hiba: portszám");
                } catch (IOException ex1) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex1);
                    return;
                }
                return;
            }
        
        for(int i=0;i<sorszamod;i++){
            if(login[i] == null ? logintmp == null : login[i].equals(logintmp)){
                try {
                    out.writeUTF("A megadott loginnév már regisztrálva van, adjon meg másikat");
                    return;
                } catch (IOException ex) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            
            }
        }
        
       //iptmp=kodol(iptmp);//----------------------------------kodolás
        
        
        login[sorszamod]=logintmp;    
        hash[sorszamod]=hashtmp;    
        idobelyeg[sorszamod]=idobelyegtmp;
        portja[sorszamod]=porttmp;
        ip[sorszamod]=iptmp;  
          
         textArea1.append("\n"+logintmp+","+idobelyegtmp+","+sorszamod); 
          
        sorszamod++;
        
        
        
        
        
        }else{
        //elfogyott a hely-----ellenörzöm, hogy szabadítható e fel ha nem akkor elutasítom
            listaellenorzes();
            if(sorszamod<maxkliens)regisztral();
            else{
                try {
                    out.writeUTF("A szerver nem fogad öbb regisztrációs kérést. Próbálkozzon később");
                    return;
                } catch (IOException ex) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        try {
            out.writeUTF("Regisztráció megtörtént");
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        } catch (IOException ex) {
            Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void torlimagat() {
        textArea1.append("\nlogin törölve");
        try {
            String log;
            
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            log = in.readUTF();
            boolean talaltam=false;
            for(int i=0;i<sorszamod;i++){
                if(login[i] == null ? log == null : login[i].equals(log)){
                    
                   long hashtmp=in.readLong();
                   if(hashtmp==hash[i]){
                    
                    idobelyeg[i]=idobelyeg[sorszamod-1];
                    idobelyeg[sorszamod-1]=0;
                    login[i]=login[sorszamod-1];
                    login[sorszamod-1]="";
                    hash[i]=hash[sorszamod-1];
                    hash[sorszamod-1]=0;

                    portja[i]=portja[sorszamod-1];
                    portja[sorszamod-1]=0;
                    ip[i]=ip[sorszamod-1];
                    ip[sorszamod-1]="";
                    sorszamod--;
                    talaltam=true;
                   }else{
                       out.writeUTF("Nem egyezik a kulcs azonosító");
                       return;
                   }     
                }
            
            }
            if(talaltam);
            else{
                 out.writeUTF("Nincsen ilyen loginnév regisztrálva");
                 return;
            }
                
            
        } catch (IOException ex) {
            try {
                out.writeUTF("Nem tudtam beolvasni a loginnevet");
            } catch (IOException ex1) {
                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            out.writeUTF("A loginnév és a hozzá tartozó adatok törölve lettek");
        } catch (IOException ex) {
            Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void regisztraltbankeres() {
        
        try{
             long log;
            
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            log = in.readLong();
            int talalat=0; 
            for(int i=0;i<=sorszamod;i++){
                if(log==hash[i])talalat++;
            
            }
            if(talalat>0){
                    out.writeInt(talalat);
                    
                    for(int i=0;i<=sorszamod;i++){
                        if(log==hash[i]){


                            out.writeUTF(login[i]);
                            out.writeUTF((ip[i]));//kodolás---------------------?
                            out.writeInt(portja[i]);
                            
                        }

                    }
                    
            }else{
                out.writeUTF("Nincsen a kulcshoz tartozó loginnév regisztrálva");
                
            }
           
        out.writeUTF("_VEGE_");
        } catch (IOException ex) {
                        //out.writeUTF("Azonosító beolvasási hiba");
                        Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void megerosit() {
        try{
             String log;
            
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            log = in.readUTF();
            for(int i=0;i<sorszamod;i++){
                if(login[i] == null ? log == null : login[i].equals(log)){
                    
                   long hasell=in.readLong();
                   
                   if(hasell==hash[i]){
                   
                     Calendar c=Calendar.getInstance();
                    long idobelyegtmp=c.getTimeInMillis();
                    idobelyeg[i]=idobelyegtmp;
                    
                    return;
                    
                   }else{
                       regisztral();
                   }
                   

                }
            
            }
            
        } catch (IOException ex) {
            try {
                out.writeUTF("Nem tudtam beolvasni a loginnevet");
            } catch (IOException ex1) {
                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private String kodol(String iptmp) {
        
        int iptmphossz=iptmp.length();
        String valto=null;
        int a=0;
        for(int i=0;i<iptmphossz;i++){
            if(a>szerverkulcs.length)a=0;
            valto=valto+String.valueOf(iptmp.charAt(i)^szerverkulcs[a]);
            a++;
        }
        
        return valto;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void listaellenorzes() {
        
        Calendar c=Calendar.getInstance();
        long idobelyegtmp=c.getTimeInMillis();
        
        for(int i=0;i<maxkliens;i++){
            
        
          
          if((idobelyegtmp-idobelyeg[i])>1000*60*30){
            idobelyeg[i]=idobelyeg[maxkliens-1];
            idobelyeg[maxkliens-1]=0;
            login[i]=login[maxkliens-1];
            login[maxkliens-1]="";
            hash[i]=hash[maxkliens-1];
            hash[maxkliens-1]=0;
            
            portja[i]=portja[maxkliens-1];
            portja[maxkliens-1]=0;
            ip[i]=ip[maxkliens-1];
            ip[maxkliens-1]="";
            sorszamod--;
            return;
          }
        
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void ellenorzes() {
         Calendar c=Calendar.getInstance();
        long idobelyegtmp=c.getTimeInMillis();
        
        for(int i=0;i<sorszamod;i++){
            
        
         
          if((idobelyegtmp-idobelyeg[i])>1000*60*10){
            idobelyeg[i]=idobelyeg[sorszamod];
            idobelyeg[sorszamod]=0;
            login[i]=login[sorszamod];
            login[sorszamod]="";
            hash[i]=hash[sorszamod];
            hash[sorszamod]=0;
            
            portja[i]=portja[sorszamod];
            portja[sorszamod]=0;
            ip[i]=ip[sorszamod];
            ip[sorszamod]="";
            sorszamod--;
            
          }
         
        }
        
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}



