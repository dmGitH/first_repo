/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csserver;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dm
 */
public class szerverke extends  javax.swing.JFrame {

    /**
     * Creates new form szerverke
     */
    public szerverke() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        textArea1 = new java.awt.TextArea();
        canvas1 = new java.awt.Canvas();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kriptova üzenettovábbító szerver modul");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("START");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setToolTipText("Alap PORT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 117, Short.MAX_VALUE)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 118, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
   while(true){  
        try {       
            // TODO add your handling code here:
            
            szerverfut();
             out.close();
            in.close();
            clientSocket.close();
            serverSocket.close();
             outv.close();
            inv.close();
            clientSocketv.close();
            serverSocketv.close();
            textArea1.setText("\nServer leállt");
        } catch (IOException ex) {
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        for(int i=0;i<1200;i++){
            jComboBox1.addItem(String.valueOf(i));
            jComboBox2.addItem(String.valueOf(i));
        }
        jComboBox1.setSelectedIndex(77);
        jComboBox2.setSelectedIndex(78);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new szerverke().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

 int portv;
    int port;
    long uzenet=0;
     ServerSocket serverSocket=null;
      Socket clientSocket = null;
      DataOutputStream out;
       DataInputStream in;
       String inputLine = null;
       
       
       ServerSocket serverSocketv=null;
      Socket clientSocketv = null;
      DataOutputStream outv;
       DataInputStream inv;
       String inputLinev = null;
       boolean mode=true;
       long data=0;  
        int kuldo=0;
  //byte dat;
        String var;
        byte [] adat =new byte[40000];
        boolean egyszer=false;
       
    
    
public void szerverfut() throws IOException{
            
    kuldo=0;
    mode=true;
    textArea1.setBackground(Color.black);
    textArea1.setForeground(Color.yellow);
    if(jComboBox1.getSelectedIndex()==0)return;
    port=jComboBox1.getSelectedIndex();
    if(jComboBox2.getSelectedIndex()==0)portv=port+1;
    else portv=jComboBox2.getSelectedIndex();
   
     Calendar c=Calendar.getInstance();
        
     String indult;
        indult = c.getTime().toLocaleString();
     textArea1.append("\nA kszerv indult: "+indult);
    
    try {
        serverSocket = new ServerSocket(port);
    } catch (IOException e) {
        textArea1.append("\nA port nem elérhető: "+String.valueOf(port));
        return;
    }
    
   
    try {
        clientSocket = serverSocket.accept();
    } catch (IOException e) {
        textArea1.append("\nKapcsolódás hiba.");
        return;
    }
     
     try {
            out = new DataOutputStream(clientSocket.getOutputStream());
        } catch (IOException ex) {
            textArea1.append("\nKimenet nyitás hiba");
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     try {
            in = new DataInputStream(clientSocket.getInputStream());
        } catch (IOException ex) {
            textArea1.append("\nBemenet nyitás hiba.");
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
     textArea1.setBackground(Color.yellow);
     textArea1.setForeground(Color.black);
    textArea1.append("\n"+clientSocket.getInetAddress().getHostAddress());
    textArea1.append("\n"+clientSocket.getPort());
    textArea1.append("\n"+clientSocket.getLocalPort());
    
    try {
        serverSocketv = new ServerSocket(portv);
    } catch (IOException e) {
        textArea1.append("\nA port nem elérhető: "+String.valueOf(portv));
        return;
    }
    try {
        clientSocketv = serverSocketv.accept();
    } catch (IOException e) {
        textArea1.append("\nKapcsolódás hiba");
        return;
    }
          
        try {
            outv = new DataOutputStream(clientSocketv.getOutputStream());
             
        } catch (IOException ex) {
            textArea1.append("\nKimenet nyitás hiba");
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        try {
            inv = new DataInputStream(clientSocketv.getInputStream());
                    
        } catch (IOException ex) {
            textArea1.append("\nBemenet nyitás hiba.");
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         
    textArea1.append("\n"+clientSocketv.getInetAddress().getHostAddress());
    textArea1.append("\n"+clientSocketv.getPort());
    textArea1.append("\n"+clientSocketv.getLocalPort());
    
    adat =new byte[40000];
  

  while (true){
         
        if(mode){
            //szövegesmód
                try {

                        textArea1.setBackground(Color.green);
                        inputLine = in.readUTF();
                        data=data+inputLine.length();




                } catch (IOException ex) {
                    textArea1.append("\nOlvasási hiba");
                    Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
                    break;
                }
                try {
                         textArea1.setBackground(Color.red);

                        inputLinev = inv.readUTF();
                        data=data+inputLine.length();

                } catch (IOException ex) {
                    textArea1.append("\nOlvasási hiba");
                    Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
                    break;
                }


                try {
                    out.writeUTF(inputLinev);
                } catch (IOException ex) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                }



                try {
                    outv.writeUTF(inputLine);
                } catch (IOException ex) {
                    Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                }







                if("SRB".equals(inputLine))break;
                if("SKILL".equals(inputLine))System.exit(0);
                if("SRB".equals(inputLinev))break;
                if("SKILL".equals(inputLinev))System.exit(0);
                
                
                
                if("OK_DATAMODE".equals(inputLine)){
                  try {
                        outv.writeUTF("Szerver indulásra kész... ");
                    } catch (IOException ex) {
                        Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        if("OK_DATAMODE".equals(inv.readUTF())){
                            out.writeUTF("OK_DATAMODE");
                            mode=false;
                            //egyszer=true;
                            kuldo=1;
                            textArea1.append("\nAdatmod be 1->2");
                            
                        }else{
                            mode=true;
                            
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                }
                 if("OK_DATAMODE".equals(inputLinev)){
                    try {
                        if("OK_DATAMODE".equals(in.readUTF())){
                            outv.writeUTF("OK_DATAMODE");
                            //mode=false;
                            //kuldo=2;
                            //outv.writeUTF("Fogadó oldal, cseréljenek kapcsolódási sorrendet(portot) ha adatot akar küldeni");
                            break;
                            //textArea1.append("\nAdatmod be 2->1");
                        }else{
                           //mode=true;
                            
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
                    }
                 
                 }
       }else{
        //adatmód ág
            
            if(kuldo==1){ //1-től 2 felé
                
                
                
                
                    
                    inputLine=in.readUTF();
                    
                    
                    
                    
                    if(inputLine.equals("BUFF")){
                        
                            in.read(adat);
                        outv.writeUTF("BUFF");
                            outv.write(adat);
                        data=data+40000;
                   }else if(inputLine.equals("NEW_BUFF")){
                        
                         
                        int a=in.readInt();
                        outv.writeUTF("NEW_BUFF");
                        outv.writeInt(a);
                        adat=new byte[a];
                        in.read(adat);
                        
                        outv.write(adat);
                        data=data+a;
                        
                        kuldo=0;
                        break;
                    }
                    inputLinev=inv.readUTF();//fadaás megerősítése 
                   out.writeUTF(inputLinev);//jöhet a következő adad
              
                /*
                
                   try {
                        outv.writeByte(in.readByte());
                        data=data+1;
                    } catch (IOException ex1) {
                        mode=true;
                        kuldo=0;
                        
                        Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex1);
                        break;
                    }
                    
                  */ 
              
                               
            }else if(kuldo==2){ //2-től 1 felé
               
                break;
            }else{
                //mode=true;
            }       
        } //adatmodág vége    
       
    }
   mode=true;
        try {
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            outv.close();
        } catch (IOException ex) {
            Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            in.close();
            inv.close();
        } catch (IOException ex) {
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            clientSocket.close();
             clientSocketv.close();
        } catch (IOException ex) {
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            serverSocket.close();
            serverSocketv.close();
        } catch (IOException ex) {
            Logger.getLogger(szerver.class.getName()).log(Level.SEVERE, null, ex);
        }
    textArea1.append("\nKapcsolat megszakítva.\nKüldött adat: "+String.valueOf(data/1024/1024)+" MB");
    szerverfut();
}
}



