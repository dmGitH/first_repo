/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kukkliens;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dm
 */
public class KUKKliensForm extends javax.swing.JFrame {

    private static final long serialVersionUID = 5551471625646345160L;

    /**
     * Creates new form KUKKliensForm
     */
    public KUKKliensForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
     byte [] kriptovakey;
     byte [] dkriptovakey;
     int kkhd=0;
    boolean kkopen=false;
    String keyfile;
    DataInputStream key;
    Socket s;
    DataInputStream in;
    DataOutputStream out;
    long hash=0;
    long kesleltet;
    
    String [] logint;
    String [] ipt;
    int [] portt;
     String beolvas = null;
     boolean vegeztem=false;
    boolean fajlkuldes=false;
    boolean fajlfogadas=false;
    int kkh=0;
    String kuldottfajl=null;
    int buffmeret=40000;
    byte [] buff;
     long adatcrc=0;
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        textArea1 = new java.awt.TextArea();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        textArea2 = new java.awt.TextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        textArea3 = new java.awt.TextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kriptova üzenet és adatküldő modul");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jFileChooser1.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        jFileChooser1.setControlButtonsAreShown(false);
        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\"));
            jFileChooser1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jFileChooser1ActionPerformed(evt);
                }
            });

            textArea1.setBackground(new java.awt.Color(0, 204, 204));
            textArea1.setText("Kattintson duplán a kulcsállományon\n\nVálassza ki a beszélgető partnerével közös kulcs-állományt. Ez bármi lehet, csak  a \"beszélgető\"\n partnerének is legyen meg, mert különben nem fogják tudni olvasni egymás üzeneteit. Célszerü \negy előre megbeszélt kulcsállomány cseréje egymás között személyesen. A kulcsállomány lehet \nzip, jpg ....\n minél változatosabb adattartalommal. Semmiképpen ne legyen csupa egyforma karakter vagy \nkisebb, \nmint 250 bájt. \n\n(A Kriptova titkosító programmal tud kulcsállományokat generálni.) \n\nÁllítsa be a regisztrációs szerverük címét és portját. Onnan az ön kulcsánakmegfelelő üzenet vagy \nadatfogadásra váró felhasználók listája megjelenik, amiből kiválaszthatja az üzenet, adatküldése \n\"célszemélyét\".\n\n");

            jButton1.setText("Keres");
            jButton1.setEnabled(false);
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });

            jTextField1.setText("127.0.0.1");
            jTextField1.setToolTipText("Regisztrációs szerver ip címe, host neve.");
            jTextField1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField1ActionPerformed(evt);
                }
            });

            jComboBox1.setToolTipText("Regisztrációs szerver port száma");

            jComboBox2.setToolTipText("Elérhető \"kulcs partnerek\"");
            jComboBox2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBox2ActionPerformed(evt);
                }
            });

            jComboBox3.setToolTipText("Késleltetés ms - szerver eléréshez");

            textArea2.setBackground(new java.awt.Color(0, 0, 0));
            textArea2.setForeground(new java.awt.Color(51, 255, 51));
            textArea2.setText("SHIFT+ENTER után küld");
            textArea2.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    textArea2KeyPressed(evt);
                }
            });

            jButton2.setText("Üzenet vége");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });

            jButton3.setText("Fájl küldés");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });

            jButton4.setText("Mégsem");
            jButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4ActionPerformed(evt);
                }
            });

            jButton5.setText("Fájl fogadás be-ki");
            jButton5.setActionCommand("");
            jButton5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton5ActionPerformed(evt);
                }
            });

            textArea3.setBackground(new java.awt.Color(0, 0, 0));
            textArea3.setForeground(new java.awt.Color(51, 255, 0));

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(textArea3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textArea2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton3)
                            .addGap(18, 18, 18)
                            .addComponent(jButton4)
                            .addGap(18, 18, 18)
                            .addComponent(jButton5)
                            .addGap(18, 18, 18)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                            .addComponent(jButton2))
                        .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(textArea3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton3)
                        .addComponent(jButton4)
                        .addComponent(jButton5)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
        
        if(fajlkuldes){
            kuldottfajl=jFileChooser1.getSelectedFile().getAbsolutePath();
            fajlkuldes=false;
            fajlkuldes();
            return;
        }
        
        
          keyfile=jFileChooser1.getSelectedFile().getAbsolutePath();
        textArea1.setText(keyfile+" a kiválasztott kulcsállomány\n"
                + "Ha ok akkor, állítsa be a regisztrációs szerver címét, portját"
                + "és nyomja meg a Keres gombot");
        
        DataInputStream beolvas;
        
        try {
            beolvas=new DataInputStream(new FileInputStream(keyfile));
        } catch (FileNotFoundException ex) {
            textArea1.append("\nFájl megnyitási hiba");
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if(jFileChooser1.getSelectedFile().length()<2000000){
            kriptovakey=new byte[(int)jFileChooser1.getSelectedFile().length()];
        }else kriptovakey=new byte[20000000];
        
        
            try {
                beolvas.read(kriptovakey);
            } catch (IOException ex) {
                textArea1.append("\nKulcs beolvasási hiba");
                Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        hash=0;
        kkh=kriptovakey.length-1;
        dkriptovakey=new byte[kriptovakey.length];
        for(int i=0;i<kriptovakey.length-1;i++)hash=hash+kriptovakey[i]+1;
         for(int i=0;i<kriptovakey.length-1;i++){
            dkriptovakey[i]=(byte) (kriptovakey[i]+1);
        
        }
        
        
        textArea1.append("\nKulcs beolvasva");
        jButton1.setEnabled(true);
        try {
            beolvas.close();
            textArea1.append("\nKulcsfájl lezárva");
        } catch (IOException ex) {
            textArea1.append("\nFájl lezárási hiba");
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        for(int i=0;i<1200;i++)jComboBox1.addItem(String.valueOf(i));
        jComboBox1.setSelectedIndex(77);
        for(int i=0;i<3000;i+=50)jComboBox3.addItem(String.valueOf(i));
        jComboBox3.setSelectedIndex(5);
          for(int i=100;i<50000;i+=100)jComboBox4.addItem(String.valueOf(i));
        jComboBox4.setSelectedIndex(100);
        
        ipt=new String[100];
        portt=new int[100];
        logint=new String[100];
        
        
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here://csatlakozás keresés a szerveren, találat esetén adatletöltés a login boxba
        textArea1.setBackground(Color.yellow);
        textArea1.append("\nRegszerverhez kapcsolódási kísérlet");
        regszerverhezkapcsololodas();
        nullaz(); // a találati listát és a combo boxot
        szerverenkereses();
        
        
        lezaras();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        
        if(jComboBox2.getItemCount()>0){
            int kivalasztott=jComboBox2.getSelectedIndex();
            textArea1.append("\n Felhasználó: "+logint[kivalasztott]+"\n"
                    + "IP címe: "+ipt[kivalasztott]+"\nPort: "+portt[kivalasztott]+"\n");
        }
        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void textArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textArea2KeyPressed
        // TODO add your handling code here:
        beolvas=textArea2.getText();
        int van=beolvas.indexOf("\n");
        if(van>0){
        textArea1.append("\nKüldés");
        
        kuld();
        beolvas="";
        
        textArea2.setText("");
        }
    }//GEN-LAST:event_textArea2KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        vegeztem=true;
        kuld();
        textArea1.setText("");
        textArea2.setText("");
        jComboBox2.removeAll();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       
        fajlkuldes=true;
        kuld();
        if(fajlkuldes){
             textArea1.append("\nKattintson  duplán a küldeni kivánt fájlon\nVagy vonja vissza a kezdeményezést a mégsem gombbal.");
             
        }else{
             textArea1.append("\nA fájlok fogadása nem engedályezett a partnerénél");
             
        }
        //fajlkuldes();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        fajlkuldes=false;
        fajlfogadas=false;
        textArea1.append("\nVisszavonva"); 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        fajlfogadas = !fajlfogadas;
        kuldeselokeszites();
        if(fajlfogadas){
            try {
                out.writeUTF("_FFKI_");
            } catch (IOException ex) {
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            try {
               out.writeUTF("_FFBE_");
            } catch (IOException ex) {
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }       
        lezaras();
               
        
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KUKKliensForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KUKKliensForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KUKKliensForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KUKKliensForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new KUKKliensForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JTextField jTextField1;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea2;
    private java.awt.TextArea textArea3;
    // End of variables declaration//GEN-END:variables

    private void regszerverhezkapcsololodas() {
        try {
            s = new Socket(jTextField1.getText(), jComboBox1.getSelectedIndex());
            textArea1.append("."); 
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        } catch (IOException ex) {
            textArea1.setText("\nNem sikerült csatlakozni a szerverhez\nEllenőrizze a megadott paramétereket");
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        try {
            in = new DataInputStream(s.getInputStream());
            textArea1.append(".");
        } catch (IOException ex) {
            textArea1.setText("\nNem sikerült a fogadó csatorna nyitás");
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        try {
            out = new DataOutputStream(s.getOutputStream());
            textArea1.append(".");
        } catch (IOException ex) {
            textArea1.setText("\nNem sikerült a küldő csatorna nyitás");
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
           
        } 
        textArea1.setForeground(Color.yellow);
        textArea1.setBackground(Color.black);
        textArea1.append("\nKapcsolódási kísérlet OK");
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void lezaras() {
         try {
            in.close();
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        } catch (IOException ex) {
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            s.close();
        } catch (IOException ex) {
            Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void szerverenkereses() {
        
        try {
            out.writeInt(3);
            
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            out.writeLong(hash);
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int talalat=0;
        try {
            talalat=in.readInt();
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sleep(kesleltet);
        } catch (InterruptedException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(talalat>0){
            int a=0;
            try {
                String tmp;
                while(in.available()>0){
                    
                    tmp=in.readUTF();
                      textArea1.append("\n"+tmp);              
                    if("_VEGE_".equals(tmp))break;
                    
                    logint[a]=tmp;
                    ipt[a]=in.readUTF();
                    portt[a]=in.readInt();
                    
                    jComboBox2.addItem(logint[a]+" ip:"+ipt[a]);
                    a++;
                
                }
            } catch (IOException ex) {
                textArea1.append("\nKeresés megszakadt... ");
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }else{
            textArea1.append("\nNincs a valasztott kulccsal regisztralt felhasználó");
        
        }
    }

    private void nullaz() {
        
        for(int i=0;i<100;i++){
            ipt[i]="";
            portt[i]=0;
            logint[i]="";
        
        }
        jComboBox2.removeAllItems();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void kuld() {
        
       
        
        if(jComboBox2.getSelectedIndex()<0){
        
            textArea1.append("\nNincsen kiválasztva partner az üzenet elküldéséhez");
        }else{
             kuldeselokeszites();
        //uzenetfogadó szerverhez csatlakozás
            
               if(vegeztem){
                   try {
                   out.writeUTF("UZENET_VEGE");
                   vegeztem=false;
                   kkh=0;
                    } catch (IOException ex) {
                        Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   beolvas="vége";
               }
               if(fajlkuldes){
               
                   try {
                        out.writeUTF("FAJL_KULDES_");
                   
                    } catch (IOException ex) {
                        textArea1.setText("\nNem sikerült az üzenet elküldése");
                        Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                try {
                    //while(in.available()<1);
                    String ok=in.readUTF();
                    if("_OK_".equals(ok));
                    else fajlkuldes=false;
                } catch (IOException ex) {
                    textArea1.setText("\nNem sikerült az üzenet fogadása");
                    Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                uzenetlezaras();
                return;
                
               }
               
         
            titkosit();
            
            
            try {
                out.writeUTF(beolvas); //küldöm
            } catch (IOException ex) {
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                textArea1.append("\n"+in.readUTF());
            } catch (IOException ex) {
                textArea1.append("\nNem sikerült az az üzenet továbbítása, lehet, hogy a kapcsolat megszakadt.");
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            uzenetlezaras();
            
        }
            
        
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void uzenetlezaras() {
        try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                s.close();
            } catch (IOException ex) {
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void titkosit() {
        
            int hossza=beolvas.length();
            char [] beolvasbyte = new char[hossza];
           
           
            for(int i=0;i<hossza;i++){
                beolvasbyte[i]=beolvas.charAt(i);
                if(kkh<0)kkh=kriptovakey.length-1;
                beolvasbyte[i]=(char) ((char)beolvasbyte[i]^kriptovakey[kkh]);
                kkh--;
            }
            beolvas=String.valueOf(beolvasbyte);
            textArea1.append("\nKódkép: "+beolvas);
            
    }

    private void fajlkuldes() {
            
        
        DataInputStream fajltolvas = null;
        
        kuldeselokeszites();
        
        long merete = jFileChooser1.getSelectedFile().length();
        
        try {
            //kapcsolat felvétel
            out.writeUTF("_KULDEMENY_");
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String valasz = null;
        try {
            valasz = in.readUTF();
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if( "_JOJJON_".equals(valasz));
        else{
            textArea1.append("\nFájl fogadása visszautasítva");
            lezaras();
            return;
        }
        
        try {
            out.writeUTF(jFileChooser1.getSelectedFile().getName()); //1-nevét
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            out.writeLong(merete); //2-méretét
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //buff méretet
        int buffindex=jComboBox4.getSelectedIndex();
        
        try {
            out.writeInt(buffindex);
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //megnyitom olvasásra    
        try {
            fajltolvas = new DataInputStream(new FileInputStream(kuldottfajl));
            
        } catch (FileNotFoundException ex) {
            textArea1.setText("\nFájl megnyitási hiba");
            lezaras();
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        kkhd=0;
        buffmeret=(jComboBox4.getSelectedIndex()+1)*100;
        buff=new byte[buffmeret];
        long olvasott=0;
        adatcrc=0;
        try {
            while(fajltolvas.available()>0){
            //mehet az adat    
                
                if(fajltolvas.available()<buffmeret){
                int ujmeret=buffmeret-fajltolvas.available();
                buff=new byte[ujmeret];
                
                }
                fajltolvas.read(buff);
                adattitkositas();
                out.write(buff);
                
                
            olvasott+=buffmeret;
            textArea3.setText("Küldött adat: "+olvasott/1024/1024+" MB    "+(int)((double)((double)olvasott/(double)merete)*100)+" %");    
            }
            
        } catch (IOException ex) {
             textArea1.append("\nFájl olvasási hiba ");
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            fajltolvas.close();
        } catch (IOException ex) {
            Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        textArea1.append("\nFájl átvitelnek vége. ");
        //textArea1.append("\nKérem küldje át az adatcrct ellenörzésre\n ");
        textArea2.setText("");
        textArea2.append("Adatcrc: "+adatcrc);
        
        
        
        uzenetlezaras();
        
        fajlkuldes=false;
         beolvas=textArea2.getText();
         textArea2.setText("");
         kuld();
        
    }

    private void kuldeselokeszites() {
        int kinek=jComboBox2.getSelectedIndex();

                try {
                   s = new Socket(ipt[kinek], portt[kinek]);
                   textArea1.append("."); 
                   //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               } catch (IOException ex) {
                   textArea1.setText("\nNem sikerült csatlakozni: "+logint[kinek]+"\nA paraméterek nem megfelelőek vagy a fogadó oldal nincsen kapcsolatban");
                   Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
                   return;
               }
            try {
                s.setSoTimeout(1000*20);
            } catch (SocketException ex) {
                textArea1.append("\nIdőtullépés");
                try {
                    s.close();
                } catch (IOException ex1) {
                    Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex1);
                }
                Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
               try {
                   in = new DataInputStream(s.getInputStream());
                   textArea1.append(".");
               } catch (IOException ex) {
                   textArea1.setText("\nNem sikerült a fogadó csatorna nyitás");
                   Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);
                   return;
               }
               try {
                   out = new DataOutputStream(s.getOutputStream());
                   textArea1.append(".");
               } catch (IOException ex) {
                   textArea1.setText("\nNem sikerült a küldő csatorna nyitás");
                   Logger.getLogger(FoForm.class.getName()).log(Level.SEVERE, null, ex);

               } 
                try {
                    kkh=in.readInt(); //kulcsszinkron olvasás
                } catch (IOException ex) {
                    Logger.getLogger(KUKKliensForm.class.getName()).log(Level.SEVERE, null, ex);
                }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
     private void adattitkositas() {
        
        
        for(int i=0;i<buff.length;i++){
            if(kkhd<0)kkhd=kriptovakey.length-1;
            adatcrc+=buff[i];
            buff[i]=(byte) (buff[i]^kriptovakey[kkhd]);
            kkhd--;
        }
        
    }
}
