package servletsqlkontakt;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Properties;

/**
 *
 * @author dm
 */
public final class szerverke extends javax.swing.JFrame {

//<editor-fold defaultstate="collapsed" desc="Osztályszintű változók">
    private static final String CONFIG = ".\\config.cfg";
    String configip;
    String JDBC_DRIVER;
    RandomAccessFile log;
    String URL;
    String USERNAME;
    String PASSWORD;
    Connection conn = null;
    Statement createStatement = null;
    DatabaseMetaData md = null;
    ResultSet rs1 = null;
    int kiszolgalt = 0;
    int columCount; //oszlop száma
    String[] fejlec;
    String Sql;
    String logba;
    String hiba = "";
    int portv;
    int port;
    long uzenet = 0;
    ServerSocket serverSocket = null;
    Socket clientSocket = null;
    public DataOutputStream kimenet;
    public DataInputStream bemenet;
    String inputLine = null;
    String egesz; // a szervletnek visszakuldott kód válasz

    boolean mode = true;
    long data = 0;
    int kuldo = 0;

    int porttmp;
    int keresazon;

    char[] szerverkulcs;
    boolean fut = true;
    boolean indul = true;
    int szalszam;
    int[] szp; //szálportok változói configból

    Thread[] run1; //szál osztály változó lefoglalása

//</editor-fold>
    /**
     * Creates new form szerverke
     */
    public szerverke() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
//        textArea1 = new java.awt.TextArea();
        canvas1 = new java.awt.Canvas();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("adatbázis kapcsolati szolgáltatás");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("START");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setToolTipText("Alap PORT");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"1", "10", "20", "30", "40", "50", "60", "70", "80", "90", " "}));
        jComboBox1.setToolTipText("Indítható szálak száma");
        jComboBox2.setSelectedIndex(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
//                                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addComponent(jButton1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
//                                                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        ))
                                .addContainerGap(18, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 117, Short.MAX_VALUE)
                                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 118, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>  

//<editor-fold defaultstate="collapsed" desc="manuális indítás, config olvasás">
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        Properties pr = new Properties();
        File conf = new File(CONFIG);
        szerverke.this.setVisible(false);

        if (conf.exists() && conf.canRead()) {
//            textArea1.append("\nConfigfájl beolvasása");
            try {
                pr.load(new FileInputStream(conf));
            } catch (FileNotFoundException ex) {

            } catch (IOException ex) {

            }
//            USERNAME = pr.getProperty("dbusername");
//            PASSWORD = pr.getProperty("dbpassword");
//            String ports = pr.getProperty("dbport");
            szalszam = Integer.parseInt(pr.getProperty("szszam"));
            if(szalszam< jComboBox2.getSelectedIndex()*10)szalszam=jComboBox2.getSelectedIndex()*10;
            int portkezd = Integer.parseInt(pr.getProperty("szpkezd"));
            run1 = new Thread[szalszam];
            szp = new int[szalszam];
            for (int i = 0; i < szalszam; i++) {
                szp[i] = portkezd + i;
            }

//            JDBC_DRIVER = pr.getProperty("dbdriver");
//            URL = pr.getProperty("dburl");

//            String database = pr.getProperty("dbname");
//            try {
//                log = new RandomAccessFile(database, "rw");
//                textArea1.append("\nLog fájl megnyitva: " + database);
//            } catch (FileNotFoundException ex) {
//                textArea1.append("\nLog fájl nyitási hiba: " + database);
//                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
//                return;
//            }
        } else {
//            textArea1.append("\nNincs meg a config fájl");
            return;
        }

        while (true) {
            try {

                szerverfut();

//                textArea1.setText("\nSzerver leállt");
            } catch (IOException ex) {

            }
        }
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Portszám feltöltés ">
    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        // TODO add your handling code here:
        for (int i = 0; i < 8888; i++) {
            jComboBox1.addItem(String.valueOf(i));

        }
        jComboBox1.setSelectedIndex(77);

    }
//</editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(szerverke.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new szerverke().setVisible(true);

        });

    }
//<editor-fold defaultstate="collapsed" desc="grafikai elemek">

    // Variables declaration - do not modify
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
//    private java.awt.TextArea textArea1;
    // End of variables declaration
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="szolgáltatás indítása, szerverport nyitás">
    public void szerverfut() throws IOException {
        fut = true;

        if (indul) {

            mode = true;
//            textArea1.setBackground(Color.green);
//            textArea1.setForeground(Color.black);
            if (jComboBox1.getSelectedIndex() == 0) {
                return;
            }
            port = jComboBox1.getSelectedIndex();

            Calendar c = Calendar.getInstance();

            String indult;
            indult = c.getTime().toLocaleString();
//            textArea1.append("\nSzerv indult: " + indult);

            try {
                serverSocket = new ServerSocket(port);
            } catch (IOException e) {
//                textArea1.append("\nA port nem elérhető: " + String.valueOf(port));
                return;
            }
            indul = false;
        }

        while (fut) {

            kiszolgalasindul();
        }

    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Vezérlő függvény a kérések fogadása osztályozása, socket nyitás,zárás">
    public void kiszolgalasindul() throws IOException {
//        textArea1.append("\nKérésre várakozik");
        boolean nincsszabadszal = true;
        OUTER:
        while (true) {
            try {
                clientSocket = serverSocket.accept();
            } catch (IOException e) {
//                textArea1.append("\nKapcsolódás hiba.");
                return;
            }
//            textArea1.append("\nKliens kapcsolódott");
            try {
                kimenet = new DataOutputStream(clientSocket.getOutputStream());
            } catch (IOException ex) {
//                textArea1.append("\nKimenet nyitás hiba");
//                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
            }
//            textArea1.append("\nKimenet nyitva");
            try {
                bemenet = new DataInputStream(clientSocket.getInputStream());
            } catch (IOException ex) {
//                textArea1.append("\nBemenet nyitás hiba.");
//                Logger.getLogger(szerverke.class.getName()).log(Level.SEVERE, null, ex);
            }

            clientSocket.setSoTimeout(10000); //eddig vár befulladt kérésre és lezárja a kapcsolatokat

//            textArea1.append("\nBemenet nyitva");
//            textArea1.setBackground(Color.black);
//            textArea1.setForeground(Color.yellow);
            //szál indítás módja
            keresazon = 0;
            keresazon = bemenet.readInt();

            if (keresazon > 0 && keresazon < 15); else {
                break;
            }

            for (int i = 0; i < szalszam; i++) {

                try {
                    if (run1[i].isAlive());

                } catch (Exception e) {
                    run1[i] = new Thread(new MutiFunkcio(szp[i]));
                    run1[i].start();
                    kimenet.writeInt(szp[i]);
                    nincsszabadszal = false;
                    break;
                }
                if (run1[i].isAlive()); else {
                    run1[i] = new Thread(new MutiFunkcio(szp[i]));
                    run1[i].start();
                    kimenet.writeInt(szp[i]);
                    nincsszabadszal = false;
                    break;
                }

            }
            break;
        }

        //kapcsolatot lezár és ujabb kérésre várakozásba kezd
        kiszolgalt++;
        if (nincsszabadszal) {
//            textArea1.append("\nElfogytak a szabad szálak");
            kimenet.writeInt(401);
        }

//        textArea1.append("\nKiszolgálás: " + kiszolgalt);
        bemenet.close();
        kimenet.close();
        clientSocket.close();
        //   logol(logba + "Servlet adatbazis kapcsolati keres : " + keresazon + " kiszolgalasszam: " + kiszolgalt + " Thread indítva:" );

    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Log fájl írása">
    public void logol(String logolni) throws IOException {

        Calendar c = Calendar.getInstance();
        String keszult;
        keszult = c.getTime().toLocaleString();
        log.seek(log.length());
        log.writeUTF("\nTime: " + keszult + "--" + logolni);
        hiba = "nincs";
        logba = "";

    }
//</editor-fold>

}
